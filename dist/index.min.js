// A simple BDD test system meant for online test during interviews
// Created by Shaheen Ghiassy
// See the full source code at: https://github.com/sghiassy/simple-bdd

function xdescribe(title,text){SBDD.tests_skipped+=1,console.log(SBDD.prefix+"SKIPPING: "+title)}function xit(title,test){SBDD.tests_skipped+=1,console.log(SBDD.prefix+"SKIP: "+title+"\n")}function describe(title,test){if(void 0===test)return xdescribe(title,test);SBDD.stack_count+=1,console.log(SBDD.prefix+"DESCRIBE: "+title+"\n"),SBDD.incrementPrefix(),test(),SBDD.prefix=SBDD.prefix.slice(0,-2),SBDD.stack_count-=1,0===SBDD.stack_count&&(console.log("Tests Passed: "+SBDD.tests_passed),console.log("Tests Skipped: "+SBDD.tests_skipped),console.log("Tests Failed: "+SBDD.tests_failed),console.log("\n\n"),SBDD.resetPrefix())}function it(title,test){if(void 0===test)return xit(title,test);try{test()}catch(e){console.log(SBDD.prefix+"FAIL: "+title),title="",console.log(e)}finally{""!=title&&console.log(SBDD.prefix+"PASS: "+title+"\n")}}function objectEquals(x,y){"use strict";if(null===x||void 0===x||null===y||void 0===y)return x===y;if(x.constructor!==y.constructor)return!1;if(x instanceof Function)return x===y;if(x instanceof RegExp)return x===y;if(x===y||x.valueOf()===y.valueOf())return!0;if(Array.isArray(x)&&x.length!==y.length)return!1;if(x instanceof Date)return!1;if(!(x instanceof Object))return!1;if(!(y instanceof Object))return!1;var p=Object.keys(x);return Object.keys(y).every(function(i){return-1!==p.indexOf(i)})&&p.every(function(i){return objectEquals(x[i],y[i])})}var SBDD={DEFAULT_PREFIX:"",PREFIX_INCREMENT:"  ",stack_count:0,tests_passed:0,tests_skipped:0,tests_failed:0,prefix:"",resetPrefix:function(){SBDD.prefix=SBDD.DEFAULT_PREFIX},incrementPrefix:function(){SBDD.prefix+=SBDD.PREFIX_INCREMENT}};console.log("\nSTARTING TESTS\n"),Object.prototype.should_equalish=function(value){return this==value},Object.prototype.should_equal=function(value){if(objectEquals(this,value))return SBDD.tests_passed+=1,!0;throw SBDD.tests_failed+=1,{expected:this,operator:"to equal",actual:value}};